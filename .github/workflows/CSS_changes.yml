
name: Check CSS Selectors on Jira Issue Transition
 
on:
  repository_dispatch:
    types:
      - check_css_changes
 
jobs:
  check_selectors:
    runs-on: ubuntu-latest
   
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.TEST_AUTOMATION_REPO_READ_TOKEN }}
         
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14'
     
      - name: Install Dependencies
        run: npm install
 
      - name: Checkout and pull submodules
        run: |
          git -C vultaraTestAutomation config remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
          git submodule sync --recursive
          git submodule update --init --recursive --remote
       
      - name: Extract Class Names from JavaScript Files
        run: |
          # Extract class names from JavaScript files and store them in a text file
          for file_js in $(find vultaraTestAutomation/cypress/selectors/ -type f -name '*.js'); do
              grep -oE "'(div|input|mat-select)\[\bclass=\"[a-zA-Z0-9-]*\"\]|(input|mat-select)\.[a-zA-Z0-9-]*|\.[a-zA-Z0-9-]*|(mat-select)\[\bclass[\*|\^]=\"[a-zA-Z0-9-]*\"\]|div\[class=\"[a-zA-Z0-9_-]*\"\]|input\.[a-zA-Z0-9_-]*|\.[a-zA-Z0-9_-]*|mat-select\[class\*=\"[a-zA-Z0-9_-]*\"\]|mat-select\[class\^=\"[a-zA-Z0-9_-]*\"\]" "$file_js"
          done | sort -u > class_names.txt
     
      - name: Display Class Names
        run: cat class_names.txt
     
      - name: Count Selectors Present in CSS Files
        id: count_selectors_before
        run: |
          total_selectors_before=$(cat class_names.txt | wc -l)
          echo "Total Selectors (Before Filtering): $total_selectors_before"
          found_selectors_before=0
          not_found_selectors_before=0
          while read -r selector_before; do
            found_before=false
            for file_css_before in $(find src/app -type f -name '*.css'); do
              if grep -q "$selector_before" "$file_css_before"; then
                found_before=true
                echo "$selector_before" >> found_selectors_list_before.txt  # Store found selector in a file
                break
              fi
            done
            if $found_before; then
              found_selectors_before=$((found_selectors_before+1))
            else
              not_found_selectors_before=$((not_found_selectors_before+1))
              echo "$selector_before" >> not_found_selectors_before_list.txt  # Store not found selector in a file
            fi
          done < class_names.txt
          echo "Total Selectors (After Filtering): $total_selectors_before"
          echo "Selectors Found Before: $found_selectors_before"
          echo "Selectors Not Found Before: $not_found_selectors_before"
          echo "$found_selectors_before" > found_selectors_before.txt  # Store found selectors count in a file
     
      - name: Print Found Selectors List (Before)
        run: cat found_selectors_list_before.txt  # Print found selectors list from the file
     
      - name: Fetch Latest Branch
        id: fetch_branch
        run: git fetch origin ${{ github.event.client_payload.issueKey }}:${{ github.event.client_payload.issueKey }}
     
      - name: Checkout Latest Branch
        if: success() && steps.fetch_branch.outputs.exit-code == 0
        run: git checkout ${{ github.event.client_payload.issueKey }}
 
      - name: Compare Found Selectors with CSS Selectors in Current Branch
        id: compare_selectors_after
        if: success() && steps.fetch_branch.outputs.exit-code == 0
        run: |
          total_selectors_after=$(cat class_names.txt | wc -l)
          echo "Total Selectors (Before Filtering): $total_selectors_after"
          found_selectors_after=0
          not_found_selectors_after=0
          while read -r selector_after; do
            found_after=false
            for file_css_after in $(find src/app -type f -name '*.css'); do
              if grep -q "$selector_after" "$file_css_after"; then
                found_after=true
                echo "$selector_after" >> found_selectors_list_after.txt  # Store found selector in a file
                break
              fi
            done
            if $found_after; then
              found_selectors_after=$((found_selectors_after+1))
            else
              not_found_selectors_after=$((not_found_selectors_after+1))
              echo "$selector_after" >> not_found_selectors_after_list.txt  # Store not found selector in a file
            fi
          done < class_names.txt
          echo "Total Selectors (After Filtering): $total_selectors_after"
          echo "Selectors Found After: $found_selectors_after"
          echo "Selectors Not Found After: $not_found_selectors_after"
          echo "$found_selectors_after" > found_selectors_after.txt  # Store found selectors count in a file
 
      - name: Find Current Pull Request
        id: get_pr_number
        uses: jwalton/gh-find-current-pr@v1.3.3
 
      - name: Print PR number
        run: echo "PR_NUMBER=${{ steps.get_pr_number.outputs.pr }}" >> $GITHUB_ENV
           
      - name: Compare Selectors Before and After
        run: |
          before_count=$(cat found_selectors_before.txt)
          after_count=$(cat found_selectors_after.txt)
          if [ "$before_count" -eq "$after_count" ]; then
            echo "Selectors count remains the same before and after."
          else
            echo "Selectors count has changed before and after."
            echo "Selectors count before: $before_count"
            echo "Selectors count after: $after_count"
             changed_selectors=""
            # Print selectors not found after
            echo "Selectors changed after:"
            changed_selectors=$(comm -13 <(sort not_found_selectors_before_list.txt) <(sort not_found_selectors_after_list.txt))
            echo "$changed_selectors"
            formatted_changed_selectors=$(echo "$changed_selectors" | sed ':a;N;$!ba;s/\n/\\n/g')  # Convert JSON to simple text with each selector on a separate line
            echo "$formatted_changed_selectors"
            # Send selectors as the body of an API request
            curl -s -u "${{ secrets.GITHUB_TOKEN }}" \
              -X POST -d '{"body": "The following selectors needs to be updated:\n'"$formatted_changed_selectors"'"}' \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.get_pr_number.outputs.pr_number }}/comments"
          fi
