const navBarSelector = require('../../selectors/navBarSelector.js')
const vulnerabilityListViewSelector = require('../../selectors/vulnerabilityListViewSelector.js')
const weaknessSelector = require('../../selectors/weaknessSelector.js');
const dayjs = require('dayjs')
import { recurse } from 'cypress-recurse';
var projectName;

describe('Vulnerability List View', () => {
    var projectId;
    var vulnerability;
    var weakness;
    var exploitableRationale;
    var weaknessDescription;
    var preControlRiskValue;
    var riskRationale;

    before(() => {//Creating Project
        cy.viewport(1920, 1080);
        cy.login();
        // Generate a random project name
        cy.generateProjectName().then(($generatedName) => {
            projectName = $generatedName;
            weaknessDescription = 'Weakness is being Automated' + ': ' + $generatedName;
            exploitableRationale = 'Exploitable Rationale Test Description';
            preControlRiskValue = '1';
            riskRationale = '2';
            cy.createProject(projectName);
        })
        cy.window().then((win) => {
            const newDesignData = JSON.parse(win.localStorage.getItem('newDesign'));
            expect(newDesignData).to.not.be.null;
            expect(newDesignData.project).to.not.be.undefined;
            // Extract the project ID from the nested structure
            projectId = newDesignData.project.id;//projectId to be used 
            expect(projectId).to.not.be.undefined;
            cy.log("Project ID is: " + projectId);
        })
        //setup the vulnerability object
        vulnerability = {
            description: 'TO BE DELETED',
            attackVector: '(AV:N)',
            attackComplexity: '(AC:H)',
            privilegesRequired: '(PR:L)',
            userInteraction: '(UI:R)',
            scope: '(S:U)',
            confidentialityImpact: '(C:N)',
            integerityImpact: '(I:L)',
            availabilityImpact: '(A:H)',
            descriptionAttribute: 'ng-reflect-model',
        };
        //setup Weakness objects
        weakness = {
            responsibleUser: 'Automation Test User',
            identificationMethod: 'Identification Method',
            sourceNotes: 'Source Notes',
            sourceNotesLink: 'Source Notes Link',
            component: 'Microcontroller0',
            attackSurface: 'Attack Surface',
            asset: 'Asset',
            cweID: '2',
            cweWeaknessType: 'Software Development',
            cweWeaknessCategory: 'Cryptographic Issues',
        };
    })

    beforeEach(() => {// Logging in and loading the created project
        cy.viewport(1920, 1080);
        cy.login();
        cy.loadProject(projectId);
    })

    it('Verify the "Add New Vulnerability" button on "Vulnerability list view" page (MAIN-TC-205, MAIN-TC-217)', () => {
        cy.visit(Cypress.env('baseURL'));
        cy.get(navBarSelector.navBarVulnerabilityListViewIcon).click();
        cy.get(vulnerabilityListViewSelector.vulnerabilityListViewAddNewButton).click();
        cy.get(vulnerabilityListViewSelector.vulnerabilityListViewAddUpdateDialog).should('exist');
        cy.get(vulnerabilityListViewSelector.vulnerabilityListViewAddUpdateDialog).should('include.text', 'Add a new vulnerability');
        cy.get(navBarSelector.navBarRunTheModelIcon).should('not.be.enabled');
    })

    it('Verify the process of adding a new vulnerability (MAIN-TC-223, MAIN-TC-239, MAIN-TC-242, MAIN-TC-238, MAIN-TC-648, , MAIN-TC-637, MAIN-TC-641)', () => {
        cy.visit(Cypress.env('baseURL'));
        cy.get(navBarSelector.navBarVulnerabilityListViewIcon).click();
        cy.intercept('POST', Cypress.env('apiURL') + '/vulnerability*').as('postRequest');
        cy.addNewVulnerability(vulnerability);
        //verify the network call
        cy.get('@postRequest').its('response.statusCode').should('eq', 200);
        //verify it is shown in the front-end
        cy.get(vulnerabilityListViewSelector.vulnerabilityListViewDescriptionTextArea).should('exist');
        cy.get(vulnerabilityListViewSelector.vulnerabilityListViewBaseScoreTableData).should('include.text', '5.4').and('include.text', 'MEDIUM');
        const todaysDate = dayjs().format('YYYY/MM/DD');
        cy.get(vulnerabilityListViewSelector.vulnerabilityListViewDateAddedTableData).should('include.text', todaysDate);
    })

    it('Verify the process of delete vulnerability (MAIN-TC-229)', () => {
        cy.visit(Cypress.env('baseURL'));
        cy.get(navBarSelector.navBarVulnerabilityListViewIcon).click();
        cy.deleteVulnerability(1);//the row of the current vulnerabiliy == 1
        //verify it is shown in the front-end
        cy.get(vulnerabilityListViewSelector.vulnerabilityListViewDescriptionTextArea).should('not.exist');
    })

    it('Verify that the Highlight button operation on the Vulnerability page for user-generated vulnerabilities (MAIN-TC-655)', () => {
        cy.visit(Cypress.env('baseURL'));
        cy.get(navBarSelector.navBarVulnerabilityListViewIcon).click();
        vulnerability.description = 'TO BE HIGHLIGHTED';
        cy.addNewVulnerability(vulnerability);//generate vulnerability
        cy.highlightVulnerability(1);//the row of the current vulnerabiliy == 1
    })

    it('Verify that the Remove Highlight button operation on the Vulnerability page for user-generated vulnerabilities (MAIN-TC-656)', () => {
        cy.visit(Cypress.env('baseURL'));
        cy.get(navBarSelector.navBarVulnerabilityListViewIcon).click();
        vulnerability.description = 'TO REMAIN UNHIGHLIGHTED';
        cy.addNewVulnerability(vulnerability);//generate vulnerability
        cy.wait(1000);
        cy.highlightVulnerability(1);//the row of the current vulnerabiliy == 1
        cy.wait(1000);
        cy.removeVulnerabilityHighlight(1);//the row of the current vulnerabiliy == 1
    })

    it('Verify the process for update vulnerability (MAIN-TC-221, MAIN-TC-222)', () => {
        cy.visit(Cypress.env('baseURL'));
        cy.get(navBarSelector.navBarVulnerabilityListViewIcon).click();
        vulnerability.description = 'TO BE UPDATED';
        cy.addNewVulnerability(vulnerability);//generate vulnerability
        cy.wait(1000);
        vulnerability.description = 'AFTER UPDATE';
        vulnerability.row = 1;
        cy.intercept('POST', Cypress.env('apiURL') + '/vulnerability*').as('postRequest');
        cy.updateVulnerability(vulnerability);
        //verify it is shown in the front-end
        cy.get(vulnerabilityListViewSelector.vulnerabilityListViewDescriptionTextArea).first().should('have.attr', vulnerability.descriptionAttribute, vulnerability.description);
        //verify the network call
        cy.get('@postRequest').its('response.statusCode').should('eq', 200);
    })

    it('Verify the weakness linking feature on vulnerability page (MAIN-TC-930)', () => {
        cy.createComponent();
        cy.addNewWeakness(weakness, weaknessDescription).then(() => {
            cy.wait(2000);
            cy.get(weaknessSelector.vulnerabilityAnalysisButton).first().click({ force: true });  // Open Analyze Weakness Dialog
            cy.get(weaknessSelector.analyzeWeaknessExploitableButton).click();
            cy.get(weaknessSelector.weaknessDropDownOptionList).eq(0).click().then(() => {
                recurse(() =>
                    cy.get(weaknessSelector.analyzeWeaknessExploitableRationaleFieldBox).click().clear().type(exploitableRationale),
                    ($inputField) => $inputField.val() === exploitableRationale,
                    { delay: 1000 })
                    .should('have.value', exploitableRationale).then(() => {
                        recurse(() =>
                            cy.get(weaknessSelector.preControlRiskValueFieldBox).click().clear().type(preControlRiskValue),
                            ($inputField) => $inputField.val() === preControlRiskValue,
                            { delay: 1000 })
                            .should('have.value', preControlRiskValue).then(() => {
                                recurse(() =>
                                    cy.get(weaknessSelector.riskRationaleFieldBox).click().clear().type(riskRationale),
                                    ($inputField) => $inputField.val() === riskRationale,
                                    { delay: 1000 })
                                    .should('have.value', riskRationale).then(() => {
                                        cy.get(weaknessSelector.globalCheckBox).check({ force: true });
                                        cy.get(weaknessSelector.globalConfirmButton).click().then(() => {
                                            cy.wait(2000);
                                            cy.get(weaknessSelector.generateVulnerabilityFromThisWeaknessButton).click();
                                            cy.get(weaknessSelector.globalConfirmButton).click();
                                            cy.get(weaknessSelector.snackBarMessage).should('include.text', 'Changes saved successfully');
                                        })
                                    })
                            })
                    })
            })
        })
        cy.addNewVulnerability(vulnerability);  // generate vulnerability
        cy.linkWeaknessWithVulnerability(1, 1);  // 
    })
})

describe('CLEANUP: Project Deletion', () => {
    it('Deleting The Project If Created', () => {
        cy.viewport(1920, 1080);
        cy.login().then(() => {
            cy.deleteProject(projectName);
        })
    })
})