{
  "stats": {
    "suites": 2,
    "tests": 10,
    "passes": 9,
    "pending": 0,
    "failures": 1,
    "start": "2024-02-21T17:58:21.272Z",
    "end": "2024-02-21T18:02:05.518Z",
    "duration": 224246,
    "testsRegistered": 10,
    "passPercent": 90,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d67697ba-fe1c-4b5a-bfa0-c68cdfa7222a",
      "title": "",
      "fullFile": "cypress\\e2e\\attack-tree\\attack-tree-canvas.cy.js",
      "file": "cypress\\e2e\\attack-tree\\attack-tree-canvas.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ac6e7b0a-5489-4b2f-b9e6-3eb6da3dfb82",
          "title": "Attack Tree",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "“Save Tree As” header option(MAIN-TC-2029, MAIN-TC-2030)",
              "fullTitle": "Attack Tree “Save Tree As” header option(MAIN-TC-2029, MAIN-TC-2030)",
              "timedOut": null,
              "duration": 34712,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        (0, _cypressRecurse.recurse)(() => cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).clear().type('Automation Tree'), $inputField => $inputField.val() == 'Automation Tree', {\n          delay: 1000\n        });\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopup).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupConfirmButton).should('be.enabled');\n              cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupName).clear().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupConfirmButton).should('not.be.enabled');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "1aded3ae-8fc5-4dfa-99f8-8853a183e33e",
              "parentUUID": "ac6e7b0a-5489-4b2f-b9e6-3eb6da3dfb82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Creating Model then Save As and Save Button Color (MAIN-TC-2031, MAIN-TC-2034)",
              "fullTitle": "Attack Tree Creating Model then Save As and Save Button Color (MAIN-TC-2031, MAIN-TC-2034)",
              "timedOut": null,
              "duration": 20852,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        (0, _cypressRecurse.recurse)(() => cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).clear().type('Automation Tree'), $inputField => $inputField.val() == 'Automation Tree', {\n          delay: 1000\n        }).then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.wait(3000);\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick().realMouseDown().realMouseMove(50, -300).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.wait(3000);\n              cy.get(attackTreeSelector.attackTreeDialogNode).eq(1).realClick().realMouseDown().realMouseMove(-10, -300).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp();\n            });\n          });\n        });\n        cy.get(attackTreeSelector.attackTreeButtonColor).should('have.css', 'background-image').and('include', 'attack-tree-unsaved-changes-icon.svg');\n        cy.get(attackTreeSelector.attackTreeDialogSaveIcon).click({\n          force: true\n        }).then(() => {\n          cy.get(attackTreeSelector.attackTreeButtonColor).should('have.css', 'background-image').and('include', 'attack-tree-button.svg');\n          cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).click().then(() => {\n              (0, _cypressRecurse.recurse)(() => cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupName).clear().type('Save As Automation Tree'), $inputField => $inputField.val() == 'Save As Automation Tree', {\n                delay: 1000\n              }).then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupConfirmButton).click().then(() => {\n                  cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).invoke('text').should('include', 'Save As Automation');\n                  cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(0).should('exist');\n                  cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(1).should('exist');\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "7d705a3d-844a-4ad2-abef-a0eea93ddcba",
              "parentUUID": "ac6e7b0a-5489-4b2f-b9e6-3eb6da3dfb82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Confirm Button Functionality Test when Panel is “Loaded”(MAIN-TC-2033)",
              "fullTitle": "Attack Tree Confirm Button Functionality Test when Panel is “Loaded”(MAIN-TC-2033)",
              "timedOut": null,
              "duration": 36602,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- Confirm Button Functionality Test when Panel is “Loaded”(MAIN-TC-2033) (failed).png\"\n      }\n    ]\n  ]\n}",
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick({\n              force: true\n            }).realMouseDown().realMouseMove(50, -200).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp();\n          }).then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist');\n                cy.wait(500);\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).should('exist').should('be.enabled');\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupCancelButton).click();\n              });\n            });\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist');\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).should('exist').should('be.enabled');\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupCancelButton).click();\n              });\n            });\n          });\n          cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n                (0, _cypressRecurse.recurse)(() => cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).clear().type('New Tree'), $inputField => $inputField.val() == 'New Tree', {\n                  delay: 1000\n                });\n                cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click();\n                cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(0).should('not.be.visible');\n                cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(1).should('not.be.visible');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 20000ms: expected '<button.mdc-button.mdc-button--raised.mat-mdc-raised-button.mat-primary.mat-mdc-button-base.ng-star-inserted>' to be 'enabled'",
                "estack": "AssertionError: Timed out retrying after 20000ms: expected '<button.mdc-button.mdc-button--raised.mat-mdc-raised-button.mat-primary.mat-mdc-button-base.ng-star-inserted>' to be 'enabled'\n    at Context.eval (webpack://cypress/./cypress/e2e/attack-tree/attack-tree-canvas.cy.js:141:126)",
                "diff": null
              },
              "uuid": "cff6f64a-914b-4ebc-a4b2-fc940b0782a0",
              "parentUUID": "ac6e7b0a-5489-4b2f-b9e6-3eb6da3dfb82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Panel State Verification Test when changes are unsaved(MAIN-TC-2035)",
              "fullTitle": "Attack Tree Panel State Verification Test when changes are unsaved(MAIN-TC-2035)",
              "timedOut": null,
              "duration": 20807,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).invoke('text').should('include', 'Automation Tree');\n            cy.get(attackTreeSelector.attackTreeDialogSaveIcon).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogFooter).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).should('be.enabled');\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownChange).should('be.enabled');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "e83464fc-d3ec-4b74-99d5-3fed0b3bf69d",
              "parentUUID": "ac6e7b0a-5489-4b2f-b9e6-3eb6da3dfb82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify 4 Components in Footer (MAIN-TC-2036)",
              "fullTitle": "Attack Tree Verify 4 Components in Footer (MAIN-TC-2036)",
              "timedOut": null,
              "duration": 19554,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click({\n      force: true\n    }).then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogAND).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogOR).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogNode).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogSAND).should('exist');\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "e9e4281b-cd6f-4b2c-b3aa-5557d84a2781",
              "parentUUID": "ac6e7b0a-5489-4b2f-b9e6-3eb6da3dfb82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Components of Node on Canvas(MAIN-TC-2037, MAIN-TC-2038)",
              "fullTitle": "Attack Tree Components of Node on Canvas(MAIN-TC-2037, MAIN-TC-2038)",
              "timedOut": null,
              "duration": 16302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick({\n              force: true\n            }).realMouseDown().realMouseMove(50, -200).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentLogo).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentNodeText).should('exist');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "92dda291-4d37-4ab2-802e-893d9b334d22",
              "parentUUID": "ac6e7b0a-5489-4b2f-b9e6-3eb6da3dfb82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dragging multiple nodes on Canvas(MAIN-TC-2039)",
              "fullTitle": "Attack Tree Dragging multiple nodes on Canvas(MAIN-TC-2039)",
              "timedOut": null,
              "duration": 12558,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick({\n              force: true\n            }).realMouseDown().realMouseMove(80, -500).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreeEmptyMessage).should('exist').invoke('text').should('include', 'Only 1 root node is allowed');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "89df3a01-c488-4c7e-bbdf-4dd05ad29adb",
              "parentUUID": "ac6e7b0a-5489-4b2f-b9e6-3eb6da3dfb82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Automatic NodeText Assignment Test(MAIN-TC-2041)",
              "fullTitle": "Attack Tree Automatic NodeText Assignment Test(MAIN-TC-2041)",
              "timedOut": null,
              "duration": 18838,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        (0, _cypressRecurse.recurse)(() => cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).clear().type('Automation Tree'), $inputField => $inputField.val() == 'Automation Tree', {\n          delay: 1000\n        }).then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.wait(3000);\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick({\n              force: true\n            }).realMouseDown().realMouseMove(50, -300).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.wait(3000);\n              cy.get(attackTreeSelector.attackTreeDialogNode).eq(1).realClick({\n                force: true\n              }).realMouseDown().realMouseMove(0, -300).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).eq(0).invoke('text').should('contain', 'Node');\n                cy.get(attackTreeSelector.attackTreeDialogCanvasComponentNodeText).eq(0).invoke('text').should('contain', 'Node1');\n                cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).eq(1).invoke('text').should('contain', 'OR');\n                cy.get(attackTreeSelector.attackTreeDialogCanvasComponentNodeText).eq(1).invoke('text').should('contain', 'OR2');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "32e00dd1-18ec-4c28-95fe-98591da8ed74",
              "parentUUID": "ac6e7b0a-5489-4b2f-b9e6-3eb6da3dfb82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Canvas Component Menu Test (MAIN-TC-2042)",
              "fullTitle": "Attack Tree Canvas Component Menu Test (MAIN-TC-2042)",
              "timedOut": null,
              "duration": 12846,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).eq(0).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuNodeTextOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDeleteTypeOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).should('exist');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "92583267-a67a-4e8a-b710-9637f76cbdbf",
              "parentUUID": "ac6e7b0a-5489-4b2f-b9e6-3eb6da3dfb82",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1aded3ae-8fc5-4dfa-99f8-8853a183e33e",
            "7d705a3d-844a-4ad2-abef-a0eea93ddcba",
            "e83464fc-d3ec-4b74-99d5-3fed0b3bf69d",
            "e9e4281b-cd6f-4b2c-b3aa-5557d84a2781",
            "92dda291-4d37-4ab2-802e-893d9b334d22",
            "89df3a01-c488-4c7e-bbdf-4dd05ad29adb",
            "32e00dd1-18ec-4c28-95fe-98591da8ed74",
            "92583267-a67a-4e8a-b710-9637f76cbdbf"
          ],
          "failures": [
            "cff6f64a-914b-4ebc-a4b2-fc940b0782a0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 193071,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a1d21e14-94f2-487f-8b8e-1882aba76d73",
          "title": "CLEANUP: Project Deletion",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deleting The Project If Created",
              "fullTitle": "CLEANUP: Project Deletion Deleting The Project If Created",
              "timedOut": null,
              "duration": 22159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.viewport(1920, 1080);\ncy.login().then(() => {\n  cy.visit(Cypress.env('baseURL') + '/dashboard').then(() => {\n    cy.wait(1000);\n    cy.get(navBarSelector.navBarProjectButton).should('be.visible').then(() => {\n      cy.get(navBarSelector.navBarProjectButton).click();\n    }).then(() => {\n      cy.get(navBarSelector.projectListDeleteProjectButton).click();\n    }).then(() => {\n      cy.wait(1000);\n      cy.contains(projectName).then($element => {\n        if ($element.length) {\n          //project exists\n          cy.deleteProject(projectName);\n        }\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "f6ed95fb-ff59-4a60-98f9-59fe18f65860",
              "parentUUID": "a1d21e14-94f2-487f-8b8e-1882aba76d73",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f6ed95fb-ff59-4a60-98f9-59fe18f65860"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22159,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress\\reports\\.jsons",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": true,
        "reportTitle": "Vultara Automation Test",
        "showPassed": true,
        "showFailed": true,
        "showPending": true,
        "showSkipped": false,
        "browser": "all",
        "quiet": true
      },
      "version": "5.2.0"
    }
  }
}