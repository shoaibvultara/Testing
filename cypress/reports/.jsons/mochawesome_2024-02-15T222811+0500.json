{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2024-02-15T17:26:58.670Z",
    "end": "2024-02-15T17:28:11.956Z",
    "duration": 73286,
    "testsRegistered": 11,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 10,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "76b02773-43a1-4a2c-8bd1-7d2e6f4e4a22",
      "title": "",
      "fullFile": "cypress\\e2e\\Threat-Generation\\attack-tree.cy.js",
      "file": "cypress\\e2e\\Threat-Generation\\attack-tree.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f0a8c8ff-c514-43c0-b0b1-fa810e9a93dd",
          "title": "Attack Tree",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Attack Tree Button in Threat List View page (MAIN-TC-1988, MAIN-TC-1990, MAIN-TC-1992)",
              "fullTitle": "Attack Tree Attack Tree Button in Threat List View page (MAIN-TC-1988, MAIN-TC-1990, MAIN-TC-1992)",
              "timedOut": null,
              "duration": 66416,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree.cy.js\\\\Attack Tree -- Attack Tree Button in Threat List View page (MAIN-TC-1988, MAIN-TC-1990, MAIN-TC-1992) -- before all hook (failed).png\"\n      }\n    ]\n  ]\n}",
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).should('exist');\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialog).should('exist');\n    cy.get(threatListViewSelector.threatListViewAttackPathTextArea).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialog).should('not.be.visible');\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 20000ms: expected 'http://localhost:4200/modeling' to include '/threats'\n\nBecause this error occurred during a `before all` hook we are skipping the remaining tests in the current suite: `Attack Tree`",
                "estack": "AssertionError: Timed out retrying after 20000ms: expected 'http://localhost:4200/modeling' to include '/threats'\n\nBecause this error occurred during a `before all` hook we are skipping the remaining tests in the current suite: `Attack Tree`\n    at Context.eval (webpack://cypress/./cypress/support/commands.js:401:17)",
                "diff": null
              },
              "uuid": "543f7898-1654-47b2-a0a7-1cb4b9d6ad1a",
              "parentUUID": "f0a8c8ff-c514-43c0-b0b1-fa810e9a93dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tree in Attack Path Popup (MAIN-TC-1993, MAIN-TC-1994, MAIN-TC-1995, MAIN-TC-1996)",
              "fullTitle": "Attack Tree Tree in Attack Path Popup (MAIN-TC-1993, MAIN-TC-1994, MAIN-TC-1995, MAIN-TC-1996)",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).type('Automation Tree').then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click();\n        });\n      });\n    });\n  });\n  let initialLocation;\n  cy.get(threatListViewSelector.threatListViewAttackPathTextArea).click().then(() => {\n    cy.get(attackPathPopupSelector.attackPathDialogAttackTreeIcon).then($el => {\n      initialLocation = $el.offset();\n    });\n    cy.get(attackPathPopupSelector.attackPathDialogLinkTreeButton).click().then(() => {\n      cy.get(attackPathPopupSelector.attackPathDialogAttackTreeIcon).then($el => {\n        const newLocation = $el.offset();\n        expect(newLocation).not.to.deep.equal(initialLocation);\n      });\n      cy.get(attackPathPopupSelector.attackPathDialogAttackTreeIcon).should('exist').click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialog).should('exist');\n      });\n    });\n  });\n  cy.get(attackPathPopupSelector.attackPathDialogAttackTreeIcon).click().then(() => {\n    // Pressing the tree button again to close\n    cy.get(attackTreeSelector.attackTreeDialog).should('not.be.visible');\n  });\n});",
              "err": {},
              "uuid": "e6b36caf-db87-4b36-8ece-f12b65277d1f",
              "parentUUID": "f0a8c8ff-c514-43c0-b0b1-fa810e9a93dd",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Attack Tree in Local Storage (MAIN-TC-1997, MAIN-TC-1998))",
              "fullTitle": "Attack Tree Attack Tree in Local Storage (MAIN-TC-1997, MAIN-TC-1998))",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.window().then(win => {\n    const diagramId = win.localStorage.getItem('diagramId');\n    expect(diagramId).to.not.exist;\n  });\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.wait(3000);\n            cy.window().then(win => {\n              const diagramId = win.localStorage.getItem('diagramId');\n              expect(diagramId).to.exist;\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "61cd3480-ff47-4935-930e-fb6ef7cca3f9",
              "parentUUID": "f0a8c8ff-c514-43c0-b0b1-fa810e9a93dd",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify the  Header, Canvas, Footer in Attack tree panel(MAIN-TC-2001)",
              "fullTitle": "Attack Tree Verify the  Header, Canvas, Footer in Attack tree panel(MAIN-TC-2001)",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogHeader).should('exist').should('be.visible');\n            cy.get(attackTreeSelector.attackTreeDialogCanvas).should('exist').should('be.visible');\n            cy.get(attackTreeSelector.attackTreeDialogFooter).should('exist').should('be.visible');\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "3fb65e78-1fb0-4213-8a04-1b9c2928593a",
              "parentUUID": "f0a8c8ff-c514-43c0-b0b1-fa810e9a93dd",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify the Header Components (MAIN-TC-2002)",
              "fullTitle": "Attack Tree Verify the Header Components (MAIN-TC-2002)",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click({\n      force: true\n    }).then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(0).should('exist').invoke('text').should('contain', 'Tree');\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).should('exist').click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogDropDown).should('exist');\n            });\n            cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).should('exist').invoke('text').should('include', 'Loaded: Automation Tree');\n            cy.get(attackTreeSelector.attackTreeDialogSaveIcon).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogPlayIcon).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogFooter).should('exist');\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "0009bb50-ef17-45d7-b32e-65b98a27b2f7",
              "parentUUID": "f0a8c8ff-c514-43c0-b0b1-fa810e9a93dd",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify the Components when No project is Loaded (MAIN-TC-2003)",
              "fullTitle": "Attack Tree Verify the Components when No project is Loaded (MAIN-TC-2003)",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogHeader).should('exist').should('be.visible');\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).should('be.enabled');\n    cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).should('exist').invoke('text').should('include', 'Loaded: None');\n    cy.get(attackTreeSelector.attackTreeDialogSaveIcon).should('not.be.enabled');\n    cy.get(attackTreeSelector.attackTreeDialogFooter).should('not.exist');\n  });\n});",
              "err": {},
              "uuid": "8614e797-ca4c-458c-8bd1-97ea5b4c2519",
              "parentUUID": "f0a8c8ff-c514-43c0-b0b1-fa810e9a93dd",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Attack tree panel \"Tree Button Dropdown\" option (MAIN-TC-2004)",
              "fullTitle": "Attack Tree Attack tree panel \"Tree Button Dropdown\" option (MAIN-TC-2004)",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogDropDown).should('exist');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).invoke('text').should('contain', 'New Tree');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownChange).should('not.be.enabled').invoke('text').should('contain', 'Change Tree Name');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownDeleteTree).invoke('text').should('contain', 'Delete Tree');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).invoke('text').should('contain', 'Load Tree');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).should('not.be.enabled').invoke('text').should('contain', 'Save Tree As');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLinkAttackPath).invoke('text').should('contain', 'Link Attack Path');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLinkVulnerability).invoke('text').should('contain', 'Link Vulnerability');\n    });\n  });\n});\ncy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n  cy.get(attackTreeSelector.attackTreeDialogSelectTree).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogTreeDropDownChange).should('be.enabled').invoke('text').should('contain', 'Change Tree Name');\n        cy.get(attackTreeSelector.attackTreeDialogTreeDropDownDeleteTree).invoke('text').should('contain', 'Delete Tree');\n        cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).should('be.enabled').invoke('text').should('contain', 'Save Tree As');\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "c3e6f57a-7221-4d72-9e5c-feea8d3be20c",
              "parentUUID": "f0a8c8ff-c514-43c0-b0b1-fa810e9a93dd",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "\"New Tree\" Dialog (MAIN-TC-2005, MAIN-TC-2006, MAIN-TC-2007)",
              "fullTitle": "Attack Tree \"New Tree\" Dialog (MAIN-TC-2005, MAIN-TC-2006, MAIN-TC-2007)",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopup).should('exist');\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).should('not.be.enabled');\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).type('Automation Tree 2');\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).should('be.enabled').click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).invoke('text').should('include', 'Automation Tree 2');\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "56dfa76c-3023-4022-be0d-56b993520d62",
              "parentUUID": "f0a8c8ff-c514-43c0-b0b1-fa810e9a93dd",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "\"Change Tree Name\" Dialog (MAIN-TC-2008)",
              "fullTitle": "Attack Tree \"Change Tree Name\" Dialog (MAIN-TC-2008)",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownChange).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogChangeTreeNamePopup).should('exist');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "b06ff872-4e60-4c2d-a26a-cdb8108da32a",
              "parentUUID": "f0a8c8ff-c514-43c0-b0b1-fa810e9a93dd",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "\"Load & Delete Tree\" Dialog (MAIN-TC-2009, MAIN-TC-2010, MAIN-TC-2012)",
              "fullTitle": "Attack Tree \"Load & Delete Tree\" Dialog (MAIN-TC-2009, MAIN-TC-2010, MAIN-TC-2012)",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist');\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).should('exist');\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupCancelButton).click(); //Cancel the loading project\n      });\n    });\n  });\n  cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeDropDownDeleteTree).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogSelectTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopupDeleteButton).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopupDeleteButton).click();\n        });\n      });\n    });\n  });\n  cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeDropDownDeleteTree).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopup).should('exist');\n      cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopupDeleteButton).should('not.be.enabled');\n      cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).should('exist').click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopupDeleteButton).should('be.enabled').click().then(() => {\n          //deletiing first one\n          cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopupDeleteButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              //cy.get(attackTreeSelector.attackTreeDialogDeleteTreeEmptyMessage).should('be.visible').should('include', 'No Trees found. Please, create new Tree');\n              //cy.get(navBarSelector.subsequentSnackBarElement).should('exist').should('include', 'No Trees found. Please, create new Tree');\n              cy.get(navBarSelector.subsequentSnackBarElement).should('exist').then(() => {\n                //working fine\n                cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n                  cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n                    cy.get(navBarSelector.subsequentSnackBarElement).should('exist').should('exist').should('include', 'No Trees found. Please, create new Tree');\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "956ea925-c82a-49f0-b066-46fbe35b0092",
              "parentUUID": "f0a8c8ff-c514-43c0-b0b1-fa810e9a93dd",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Delete the Project",
              "fullTitle": "Attack Tree Delete the Project",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.deleteProject(projectName);",
              "err": {},
              "uuid": "bea4d781-8613-4385-b01c-b59606468d13",
              "parentUUID": "f0a8c8ff-c514-43c0-b0b1-fa810e9a93dd",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "543f7898-1654-47b2-a0a7-1cb4b9d6ad1a"
          ],
          "pending": [],
          "skipped": [
            "e6b36caf-db87-4b36-8ece-f12b65277d1f",
            "61cd3480-ff47-4935-930e-fb6ef7cca3f9",
            "3fb65e78-1fb0-4213-8a04-1b9c2928593a",
            "0009bb50-ef17-45d7-b32e-65b98a27b2f7",
            "8614e797-ca4c-458c-8bd1-97ea5b4c2519",
            "c3e6f57a-7221-4d72-9e5c-feea8d3be20c",
            "56dfa76c-3023-4022-be0d-56b993520d62",
            "b06ff872-4e60-4c2d-a26a-cdb8108da32a",
            "956ea925-c82a-49f0-b066-46fbe35b0092",
            "bea4d781-8613-4385-b01c-b59606468d13"
          ],
          "duration": 66416,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress\\reports\\.jsons",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": true,
        "reportTitle": "Vultara Automation Test",
        "showPassed": true,
        "showFailed": true,
        "showPending": true,
        "showSkipped": false,
        "browser": "all",
        "quiet": true
      },
      "version": "5.2.0"
    }
  }
}