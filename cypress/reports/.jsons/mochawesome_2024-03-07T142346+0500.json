{
  "stats": {
    "suites": 2,
    "tests": 17,
    "passes": 16,
    "pending": 0,
    "failures": 1,
    "start": "2024-03-07T09:12:49.727Z",
    "end": "2024-03-07T09:23:46.950Z",
    "duration": 657223,
    "testsRegistered": 17,
    "passPercent": 94.11764705882352,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5ad8e4ec-1439-49bd-9b27-48b31ca56a99",
      "title": "",
      "fullFile": "cypress\\e2e\\attack-tree\\attack-tree-canvas.cy.js",
      "file": "cypress\\e2e\\attack-tree\\attack-tree-canvas.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9d26c063-80f7-451c-ace6-2c92f1beed27",
          "title": "Attack Tree",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "“Save Tree As” header option(MAIN-TC-2029, MAIN-TC-2030)",
              "fullTitle": "Attack Tree “Save Tree As” header option(MAIN-TC-2029, MAIN-TC-2030)",
              "timedOut": null,
              "duration": 183873,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        (0, _cypressRecurse.recurse)(() => cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).clear().type('Automation Tree'), $inputField => $inputField.val() == 'Automation Tree', {\n          delay: 1000\n        });\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopup).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupConfirmButton).should('be.enabled');\n              cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupName).clear().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupConfirmButton).should('not.be.enabled');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "2e69ba16-2539-4643-8a49-2c61885b4147",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Creating Model then Save As and Save Button Color (MAIN-TC-2031, MAIN-TC-2034)",
              "fullTitle": "Attack Tree Creating Model then Save As and Save Button Color (MAIN-TC-2031, MAIN-TC-2034)",
              "timedOut": null,
              "duration": 54234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        (0, _cypressRecurse.recurse)(() => cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).clear().type('Automation Tree'), $inputField => $inputField.val() == 'Automation Tree', {\n          delay: 1000\n        }).then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.wait(3000);\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick().realMouseDown().realMouseMove(50, -300).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.wait(3000);\n              cy.get(attackTreeSelector.attackTreeDialogNode).eq(1).realClick().realMouseDown().realMouseMove(-20, -280).get(attackTreeSelector.attackTreeDialogCanvasElement).eq(0).realMouseUp();\n            });\n          });\n        });\n        cy.get(attackTreeSelector.attackTreeButtonColor).should('have.css', 'background-image').and('include', 'attack-tree-unsaved-changes-icon.svg');\n        cy.get(attackTreeSelector.attackTreeDialogSaveIcon).click({\n          force: true\n        }).then(() => {\n          cy.get(attackTreeSelector.attackTreeButtonColor).should('have.css', 'background-image').and('include', 'attack-tree-button.svg');\n          cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).click().then(() => {\n              (0, _cypressRecurse.recurse)(() => cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupName).clear().type('Save As Automation Tree'), $inputField => $inputField.val() == 'Save As Automation Tree', {\n                delay: 1000\n              }).then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupConfirmButton).click().then(() => {\n                  cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).invoke('text').should('include', 'Save As Automation');\n                  cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(0).should('exist');\n                  cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(1).should('exist');\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "33ac3f71-bb98-4734-aeb7-3b4dfb666109",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Confirm Button Functionality Test when Panel is “Loaded”(MAIN-TC-2033)",
              "fullTitle": "Attack Tree Confirm Button Functionality Test when Panel is “Loaded”(MAIN-TC-2033)",
              "timedOut": null,
              "duration": 71879,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- Confirm Button Functionality Test when Panel is “Loaded”(MAIN-TC-2033) (failed).png\"\n      }\n    ],\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- Confirm Button Functionality Test when Panel is “Loaded”(MAIN-TC-2033) (failed) (attempt 2).png\"\n      }\n    ]\n  ]\n}",
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick({\n              force: true\n            }).realMouseDown().realMouseMove(50, -200).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp();\n          }).then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist');\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).should('exist').should('be.enabled');\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupCancelButton).click();\n              });\n            });\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist');\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).should('exist').should('be.enabled');\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupCancelButton).click();\n              });\n            });\n          });\n          cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n                (0, _cypressRecurse.recurse)(() => cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).clear().type('New Tree'), $inputField => $inputField.val() == 'New Tree', {\n                  delay: 1000\n                });\n                cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click();\n                cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(0).should('not.be.visible');\n                cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(1).should('not.be.visible');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 20000ms: expected '<button.mdc-button.mdc-button--raised.mat-mdc-raised-button.mat-primary.mat-mdc-button-base.ng-star-inserted>' to be 'enabled'",
                "estack": "AssertionError: Timed out retrying after 20000ms: expected '<button.mdc-button.mdc-button--raised.mat-mdc-raised-button.mat-primary.mat-mdc-button-base.ng-star-inserted>' to be 'enabled'\n    at Context.eval (webpack://cypress/./cypress/e2e/attack-tree/attack-tree-canvas.cy.js:138:126)",
                "diff": null
              },
              "uuid": "c276f181-b5bd-4cdd-9458-edb73d4de065",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Panel State Verification Test when changes are unsaved(MAIN-TC-2035)",
              "fullTitle": "Attack Tree Panel State Verification Test when changes are unsaved(MAIN-TC-2035)",
              "timedOut": null,
              "duration": 31545,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- Panel State Verification Test when changes are unsaved(MAIN-TC-2035) (failed).png\"\n      }\n    ],\n    []\n  ]\n}",
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).invoke('text').should('include', 'Automation Tree');\n            cy.get(attackTreeSelector.attackTreeDialogSaveIcon).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogFooter).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).should('be.enabled');\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownChange).should('be.enabled');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "dcb665bc-370d-4fde-89db-0728c3e8e5a6",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify 4 Components in Footer (MAIN-TC-2036)",
              "fullTitle": "Attack Tree Verify 4 Components in Footer (MAIN-TC-2036)",
              "timedOut": null,
              "duration": 29495,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click({\n      force: true\n    }).then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogAND).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogOR).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogNode).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogSAND).should('exist');\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "6725c04a-b50c-43a7-bff7-e577813d0719",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Components of Node on Canvas(MAIN-TC-2037, MAIN-TC-2038)",
              "fullTitle": "Attack Tree Components of Node on Canvas(MAIN-TC-2037, MAIN-TC-2038)",
              "timedOut": null,
              "duration": 13426,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick({\n              force: true\n            }).realMouseDown().realMouseMove(50, -200).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentLogo).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentNodeText).should('exist');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "b0020317-8613-49b5-92b2-ccb877858a12",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Canvas Component Menu Test (MAIN-TC-2042)",
              "fullTitle": "Attack Tree Canvas Component Menu Test (MAIN-TC-2042)",
              "timedOut": null,
              "duration": 15668,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).eq(0).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuNodeTextOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDeleteTypeOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).should('exist');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "9cdea30d-3c96-4782-8d77-5914d8664e75",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Automatic NodeText Assignment Test(MAIN-TC-2041)",
              "fullTitle": "Attack Tree Automatic NodeText Assignment Test(MAIN-TC-2041)",
              "timedOut": null,
              "duration": 14437,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).eq(0).invoke('text').should('contain', 'Node');\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponentNodeText).eq(0).invoke('text').should('contain', 'Node1');\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).eq(1).invoke('text').should('contain', 'OR');\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponentNodeText).eq(1).invoke('text').should('contain', 'OR2');\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "ce483ac3-22a3-4b8f-97e8-c8d1191abdd3",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dragging multiple nodes on Canvas(MAIN-TC-2039)",
              "fullTitle": "Attack Tree Dragging multiple nodes on Canvas(MAIN-TC-2039)",
              "timedOut": null,
              "duration": 15369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick({\n              force: true\n            }).realMouseDown().realMouseMove(50, -200).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick({\n                force: true\n              }).realMouseDown().realMouseMove(80, -500).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreeEmptyMessage).should('exist').invoke('text').should('include', 'Only 1 root node is allowed');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "cbc42d28-5564-4b49-b3cf-b81c4f472475",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Node Drop-down and Changing Node (MAIN-TC-3213, MAIN-TC-3212, MAIN-TC-3220)",
              "fullTitle": "Attack Tree Node Drop-down and Changing Node (MAIN-TC-3213, MAIN-TC-3212, MAIN-TC-3220)",
              "timedOut": null,
              "duration": 16995,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).eq(0).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDropDown).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuNodeTextOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuAssignValueOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuControlOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuLinkChildTreeOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDeleteTypeOption).should('exist');\n              //Changing Node\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).eq(0).invoke('text').should('contain', 'Node');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).eq(0).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeNodeOROption).eq(0).click().then(() => {\n                  cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).eq(0).invoke('text').should('contain', 'OR');\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "c29d9b2e-6840-4021-85ae-d7e8c08a7086",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unlinking the 2nd Component (MAIN-TC-3214, MAIN-TC-3215)",
              "fullTitle": "Attack Tree Unlinking the 2nd Component (MAIN-TC-3214, MAIN-TC-3215)",
              "timedOut": null,
              "duration": 14945,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(1).realClick({\n              force: true\n            }).realMouseDown().realMouseMove(80, -500).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.get(attackTreeSelector.attackTreeCanvasDragChildComponentConfirmationDialog).should('exist').invoke('text').should('contain', 'The selected node and all of its children will be deleted.').then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopupDeleteButton).click().then(() => {\n                  cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(1).should('not.exist');\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "78e75f10-2b7c-449a-b084-430debe96065",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Link Attack Path from tree drop down (MAIN-TC-3216)",
              "fullTitle": "Attack Tree Link Attack Path from tree drop down (MAIN-TC-3216)",
              "timedOut": null,
              "duration": 13543,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLinkAttackPath).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogLinkAttackPathPopup).should('exist');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "d5a005d2-e960-474a-9f79-cea88eaca09e",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Link Vulnerability from tree drop down (MAIN-TC-3217)",
              "fullTitle": "Attack Tree Link Vulnerability from tree drop down (MAIN-TC-3217)",
              "timedOut": null,
              "duration": 12040,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLinkVulnerability).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogLinkVulnerabilityPathPopup).should('exist');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "35fa7f2c-53a6-4db3-a765-64b9d36cac76",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "\"OR Component\" Drop-down & Changing Node(MAIN-TC-3221, MAIN-TC-3222)",
              "fullTitle": "Attack Tree \"OR Component\" Drop-down & Changing Node(MAIN-TC-3221, MAIN-TC-3222)",
              "timedOut": null,
              "duration": 14452,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).should('contain', 'OR'); //verifying the OR Gate \n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDropDown).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuNodeTextOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDeleteTypeOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuControlOption).should('not.exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuLinkChildTreeOption).should('not.exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuAssignValueOption).should('not.exist');\n              //Changing OR to Node\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).eq(1).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeNodeNodeOption).eq(1).click().then(() => {\n                  cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).invoke('text').should('include', 'Node'); //verifying the OR Gate \n                  cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).eq(1).click().then(() => {\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDropDown).should('exist');\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuNodeTextOption).should('exist');\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).should('exist');\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDeleteTypeOption).should('exist');\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuControlOption).should('exist');\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuLinkChildTreeOption).should('exist');\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuAssignValueOption).should('exist');\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "defb82f7-9e68-468f-a68a-2db1a67b9f12",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Apply attack tree to threat\" button (MAIN-TC-3218)",
              "fullTitle": "Attack Tree Apply attack tree to threat\" button (MAIN-TC-3218)",
              "timedOut": null,
              "duration": 11340,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogApplyAttackTreeToThreat).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogApplyAttackTreePopup).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogApplyAttackPopupHeading).invoke('text').should('contain', 'Linked Threats');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "8684f87a-c094-4c3f-a06d-b7ca34ea8b19",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Control in 3 dot drop down of a node (MAIN-TC-3223)",
              "fullTitle": "Attack Tree Control in 3 dot drop down of a node (MAIN-TC-3223)",
              "timedOut": null,
              "duration": 14199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).eq(0).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuControlOption).eq(0).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeCanvasControlPopup).should('exist');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "6d6c6fcf-4c25-4bc0-b2fc-21e1f15ecb23",
              "parentUUID": "9d26c063-80f7-451c-ace6-2c92f1beed27",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e69ba16-2539-4643-8a49-2c61885b4147",
            "33ac3f71-bb98-4734-aeb7-3b4dfb666109",
            "dcb665bc-370d-4fde-89db-0728c3e8e5a6",
            "6725c04a-b50c-43a7-bff7-e577813d0719",
            "b0020317-8613-49b5-92b2-ccb877858a12",
            "9cdea30d-3c96-4782-8d77-5914d8664e75",
            "ce483ac3-22a3-4b8f-97e8-c8d1191abdd3",
            "cbc42d28-5564-4b49-b3cf-b81c4f472475",
            "c29d9b2e-6840-4021-85ae-d7e8c08a7086",
            "78e75f10-2b7c-449a-b084-430debe96065",
            "d5a005d2-e960-474a-9f79-cea88eaca09e",
            "35fa7f2c-53a6-4db3-a765-64b9d36cac76",
            "defb82f7-9e68-468f-a68a-2db1a67b9f12",
            "8684f87a-c094-4c3f-a06d-b7ca34ea8b19",
            "6d6c6fcf-4c25-4bc0-b2fc-21e1f15ecb23"
          ],
          "failures": [
            "c276f181-b5bd-4cdd-9458-edb73d4de065"
          ],
          "pending": [],
          "skipped": [],
          "duration": 527440,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cfe897f6-b06e-4fea-ab40-52c5ef8d63f7",
          "title": "CLEANUP: Project Deletion",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deleting The Project If Created",
              "fullTitle": "CLEANUP: Project Deletion Deleting The Project If Created",
              "timedOut": null,
              "duration": 18193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.viewport(1920, 1080);\ncy.login().then(() => {\n  cy.deleteProject(projectName);\n});",
              "err": {},
              "uuid": "902c696c-c609-444b-80c9-2280b2b27b98",
              "parentUUID": "cfe897f6-b06e-4fea-ab40-52c5ef8d63f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "902c696c-c609-444b-80c9-2280b2b27b98"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18193,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress\\reports\\.jsons",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": true,
        "reportTitle": "Vultara Automation Test",
        "showPassed": true,
        "showFailed": true,
        "showPending": true,
        "showSkipped": false,
        "browser": "all",
        "quiet": true
      },
      "version": "5.2.0"
    }
  }
}