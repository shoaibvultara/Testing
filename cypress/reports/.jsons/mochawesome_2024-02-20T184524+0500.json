{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2024-02-20T13:42:34.930Z",
    "end": "2024-02-20T13:45:24.260Z",
    "duration": 169330,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "413fea9c-d1d6-4aa8-aa68-63c08cad42b4",
      "title": "",
      "fullFile": "cypress\\e2e\\Threat-Generation\\attack-tree-canvas.cy.js",
      "file": "cypress\\e2e\\Threat-Generation\\attack-tree-canvas.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "13b009d9-ccb4-4359-b92b-f5c4809ab6e7",
          "title": "Attack Tree",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "“Save Tree As” header option(MAIN-TC-2029, MAIN-TC-2030)",
              "fullTitle": "Attack Tree “Save Tree As” header option(MAIN-TC-2029, MAIN-TC-2030)",
              "timedOut": null,
              "duration": 38264,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).type('Automation Tree').then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopup).should('exist');\n                cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupConfirmButton).should('be.enabled');\n                cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupName).clear().then(() => {\n                  cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupConfirmButton).should('not.be.enabled');\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "2c31496d-079c-4249-9c9e-5228552b9682",
              "parentUUID": "13b009d9-ccb4-4359-b92b-f5c4809ab6e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Creating Model then Save As and Save Button Color (MAIN-TC-2031, MAIN-TC-2034)",
              "fullTitle": "Attack Tree Creating Model then Save As and Save Button Color (MAIN-TC-2031, MAIN-TC-2034)",
              "timedOut": null,
              "duration": 21835,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).type('Automation Tree').then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick().realMouseDown().realMouseMove(50, -300).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.wait(3000);\n              cy.get(attackTreeSelector.attackTreeDialogNode).eq(1).realClick().realMouseDown().realMouseMove(0, -300).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp();\n            });\n          });\n          cy.get(attackTreeSelector.attackTreeButtonColor).should('have.css', 'background-image').and('include', 'attack-tree-unsaved-changes-icon.svg');\n          cy.get(attackTreeSelector.attackTreeDialogSaveIcon).click({\n            force: true\n          }).then(() => {\n            cy.get(attackTreeSelector.attackTreeButtonColor).should('have.css', 'background-image').and('include', 'attack-tree-button.svg');\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupName).clear().type('Save As Automation').then(() => {\n                  cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupConfirmButton).click().then(() => {\n                    cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).invoke('text').should('include', 'Save As Automation');\n                    cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(0).should('exist');\n                    cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(1).should('exist');\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "f282f2f8-53ec-4e8c-8538-6d0693a80794",
              "parentUUID": "13b009d9-ccb4-4359-b92b-f5c4809ab6e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Confirm Button Functionality Test when Panel is “Loaded”(MAIN-TC-2033)",
              "fullTitle": "Attack Tree Confirm Button Functionality Test when Panel is “Loaded”(MAIN-TC-2033)",
              "timedOut": null,
              "duration": 15119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick().realMouseDown().realMouseMove(50, -200).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp();\n          });\n          cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).should('exist').should('be.enabled');\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupCancelButton).click();\n            });\n          });\n          cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).should('exist').should('be.enabled');\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupCancelButton).click();\n            });\n          });\n        });\n        cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).type('New Tree');\n              cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click();\n              cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(0).should('not.be.visible');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(1).should('not.be.visible');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "3971c7ff-8703-4f0c-82c7-c3005d7b0103",
              "parentUUID": "13b009d9-ccb4-4359-b92b-f5c4809ab6e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Panel State Verification Test when changes are unsaved(MAIN-TC-2035)",
              "fullTitle": "Attack Tree Panel State Verification Test when changes are unsaved(MAIN-TC-2035)",
              "timedOut": null,
              "duration": 13134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).invoke('text').should('include', 'Automation Tree');\n            cy.get(attackTreeSelector.attackTreeDialogSaveIcon).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogFooter).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).should('be.enabled');\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownChange).should('be.enabled');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "934c30da-436a-4ae0-93b7-ae22ddf46fbd",
              "parentUUID": "13b009d9-ccb4-4359-b92b-f5c4809ab6e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify 4 Components in Footer (MAIN-TC-2036)",
              "fullTitle": "Attack Tree Verify 4 Components in Footer (MAIN-TC-2036)",
              "timedOut": null,
              "duration": 9316,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click({\n      force: true\n    }).then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogAND).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogOR).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogNode).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogSAND).should('exist');\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "91dba60e-24dc-4188-8774-e41bd6c109eb",
              "parentUUID": "13b009d9-ccb4-4359-b92b-f5c4809ab6e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Components of Node on Canvas(MAIN-TC-2037, MAIN-TC-2038)",
              "fullTitle": "Attack Tree Components of Node on Canvas(MAIN-TC-2037, MAIN-TC-2038)",
              "timedOut": null,
              "duration": 12524,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick().realMouseDown().realMouseMove(50, -200).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentLogo).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentNodeText).should('exist');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "fdc762b2-1ff9-4031-9767-a3d7eed1613d",
              "parentUUID": "13b009d9-ccb4-4359-b92b-f5c4809ab6e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dragging multiple nodes on Canvas(MAIN-TC-2039)",
              "fullTitle": "Attack Tree Dragging multiple nodes on Canvas(MAIN-TC-2039)",
              "timedOut": null,
              "duration": 10050,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick().realMouseDown().realMouseMove(80, -400).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreeEmptyMessage).should('exist').invoke('text').should('include', 'Only 1 root node is allowed');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "0ba2791a-22f6-4c89-aabc-e05b12bec389",
              "parentUUID": "13b009d9-ccb4-4359-b92b-f5c4809ab6e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Automatic NodeText Assignment Test(MAIN-TC-2041)",
              "fullTitle": "Attack Tree Automatic NodeText Assignment Test(MAIN-TC-2041)",
              "timedOut": null,
              "duration": 11329,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).type('Automation Tree').then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick().realMouseDown().realMouseMove(50, -300).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp();\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(1).realClick().realMouseDown().realMouseMove(0, -300).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).eq(0).invoke('text').should('contain', 'Node');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentNodeText).eq(0).invoke('text').should('contain', 'Node1');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).eq(1).invoke('text').should('contain', 'OR');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentNodeText).eq(1).invoke('text').should('contain', 'OR2');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "117fa990-9847-46de-83b2-f6732db4e5e3",
              "parentUUID": "13b009d9-ccb4-4359-b92b-f5c4809ab6e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Canvas Component Menu Test (MAIN-TC-2042)",
              "fullTitle": "Attack Tree Canvas Component Menu Test (MAIN-TC-2042)",
              "timedOut": null,
              "duration": 10640,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).eq(0).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuNodeTextOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDeleteTypeOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).should('exist');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "292ec6a2-9c21-414a-aefc-64ed2186dbd4",
              "parentUUID": "13b009d9-ccb4-4359-b92b-f5c4809ab6e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete the Project",
              "fullTitle": "Attack Tree Delete the Project",
              "timedOut": null,
              "duration": 20382,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.deleteProject(projectName);",
              "err": {},
              "uuid": "4c8c2d9d-3dc5-47ee-9a38-6b950b06f282",
              "parentUUID": "13b009d9-ccb4-4359-b92b-f5c4809ab6e7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c31496d-079c-4249-9c9e-5228552b9682",
            "f282f2f8-53ec-4e8c-8538-6d0693a80794",
            "3971c7ff-8703-4f0c-82c7-c3005d7b0103",
            "934c30da-436a-4ae0-93b7-ae22ddf46fbd",
            "91dba60e-24dc-4188-8774-e41bd6c109eb",
            "fdc762b2-1ff9-4031-9767-a3d7eed1613d",
            "0ba2791a-22f6-4c89-aabc-e05b12bec389",
            "117fa990-9847-46de-83b2-f6732db4e5e3",
            "292ec6a2-9c21-414a-aefc-64ed2186dbd4",
            "4c8c2d9d-3dc5-47ee-9a38-6b950b06f282"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 162593,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress\\reports\\.jsons",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": true,
        "reportTitle": "Vultara Automation Test",
        "showPassed": true,
        "showFailed": true,
        "showPending": true,
        "showSkipped": false,
        "browser": "all",
        "quiet": true
      },
      "version": "5.2.0"
    }
  }
}