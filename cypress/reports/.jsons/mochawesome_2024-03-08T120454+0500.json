{
  "stats": {
    "suites": 2,
    "tests": 17,
    "passes": 12,
    "pending": 0,
    "failures": 5,
    "start": "2024-03-08T06:50:52.014Z",
    "end": "2024-03-08T07:04:54.081Z",
    "duration": 842067,
    "testsRegistered": 17,
    "passPercent": 70.58823529411765,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2497afb9-8736-47e6-b42f-21e18f7e2969",
      "title": "",
      "fullFile": "cypress\\e2e\\attack-tree\\attack-tree-canvas.cy.js",
      "file": "cypress\\e2e\\attack-tree\\attack-tree-canvas.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
          "title": "Attack Tree",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "“Save Tree As” header option(MAIN-TC-2029, MAIN-TC-2030)",
              "fullTitle": "Attack Tree “Save Tree As” header option(MAIN-TC-2029, MAIN-TC-2030)",
              "timedOut": null,
              "duration": 104950,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        (0, _cypressRecurse.recurse)(() => cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).clear().type('Automation Tree'), $inputField => $inputField.val() == 'Automation Tree', {\n          delay: 1000\n        });\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopup).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupConfirmButton).should('be.enabled');\n              cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupName).clear().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupConfirmButton).should('not.be.enabled');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "f251d558-af1a-4b41-aab9-40a7774a6624",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Creating Model then Save As and Save Button Color (MAIN-TC-2031, MAIN-TC-2034)",
              "fullTitle": "Attack Tree Creating Model then Save As and Save Button Color (MAIN-TC-2031, MAIN-TC-2034)",
              "timedOut": null,
              "duration": 40268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        (0, _cypressRecurse.recurse)(() => cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).clear().type('Automation Tree'), $inputField => $inputField.val() == 'Automation Tree', {\n          delay: 1000\n        }).then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.wait(3000);\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick().realMouseDown().realMouseMove(50, -300).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.wait(3000);\n              cy.get(attackTreeSelector.attackTreeDialogNode).eq(1).realClick().realMouseDown().realMouseMove(-20, -280).get(attackTreeSelector.attackTreeDialogCanvasElement).eq(0).realMouseUp();\n            });\n          });\n        });\n        cy.get(attackTreeSelector.attackTreeButtonColor).should('have.css', 'background-image').and('include', 'attack-tree-unsaved-changes-icon.svg');\n        cy.get(attackTreeSelector.attackTreeDialogSaveIcon).click({\n          force: true\n        }).then(() => {\n          cy.get(attackTreeSelector.attackTreeButtonColor).should('have.css', 'background-image').and('include', 'attack-tree-button.svg');\n          cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).click().then(() => {\n              (0, _cypressRecurse.recurse)(() => cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupName).clear().type('Save As Automation Tree'), $inputField => $inputField.val() == 'Save As Automation Tree', {\n                delay: 1000\n              }).then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogSaveTreeAsPopupConfirmButton).click().then(() => {\n                  cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).invoke('text').should('include', 'Save As Automation');\n                  cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(0).should('exist');\n                  cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(1).should('exist');\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "499c5908-bcb2-4ce7-9924-fbd29f64e5af",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Confirm Button Functionality Test when Panel is “Loaded”(MAIN-TC-2033)",
              "fullTitle": "Attack Tree Confirm Button Functionality Test when Panel is “Loaded”(MAIN-TC-2033)",
              "timedOut": null,
              "duration": 36909,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- Confirm Button Functionality Test when Panel is “Loaded”(MAIN-TC-2033) (failed).png\"\n      }\n    ],\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- Confirm Button Functionality Test when Panel is “Loaded”(MAIN-TC-2033) (failed) (attempt 2).png\"\n      }\n    ]\n  ]\n}",
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick({\n              force: true\n            }).realMouseDown().realMouseMove(50, -200).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp();\n          }).then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist');\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).should('exist').should('be.enabled');\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupCancelButton).click();\n              });\n            });\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist');\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).should('exist').should('be.enabled');\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupCancelButton).click();\n              });\n            });\n          });\n          cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n                (0, _cypressRecurse.recurse)(() => cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).clear().type('New Tree'), $inputField => $inputField.val() == 'New Tree', {\n                  delay: 1000\n                });\n                cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click();\n                cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(0).should('not.be.visible');\n                cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(1).should('not.be.visible');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 20000ms: expected '<button.mdc-button.mdc-button--raised.mat-mdc-raised-button.mat-primary.mat-mdc-button-base.ng-star-inserted>' to be 'enabled'",
                "estack": "AssertionError: Timed out retrying after 20000ms: expected '<button.mdc-button.mdc-button--raised.mat-mdc-raised-button.mat-primary.mat-mdc-button-base.ng-star-inserted>' to be 'enabled'\n    at Context.eval (webpack://cypress/./cypress/e2e/attack-tree/attack-tree-canvas.cy.js:138:126)",
                "diff": null
              },
              "uuid": "7d13bccd-f364-45d5-b287-ff0aeedae4b6",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Panel State Verification Test when changes are unsaved(MAIN-TC-2035)",
              "fullTitle": "Attack Tree Panel State Verification Test when changes are unsaved(MAIN-TC-2035)",
              "timedOut": null,
              "duration": 37262,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- Panel State Verification Test when changes are unsaved(MAIN-TC-2035) (failed).png\"\n      }\n    ],\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- Panel State Verification Test when changes are unsaved(MAIN-TC-2035) (failed) (attempt 2).png\"\n      }\n    ]\n  ]\n}",
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).invoke('text').should('include', 'Automation Tree');\n            cy.get(attackTreeSelector.attackTreeDialogSaveIcon).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogFooter).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).should('be.enabled');\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownChange).should('be.enabled');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 20000ms: Expected to find element: `button:contains(\"Change Tree Name\")`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 20000ms: Expected to find element: `button:contains(\"Change Tree Name\")`, but never found it.\n    at Context.eval (webpack://cypress/./cypress/e2e/attack-tree/attack-tree-canvas.cy.js:184:98)",
                "diff": null
              },
              "uuid": "817f7de3-af3c-4593-bee5-d185f11f5782",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify 4 Components in Footer (MAIN-TC-2036)",
              "fullTitle": "Attack Tree Verify 4 Components in Footer (MAIN-TC-2036)",
              "timedOut": null,
              "duration": 14503,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click({\n      force: true\n    }).then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogAND).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogOR).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogNode).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogSAND).should('exist');\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "d1f9ac5e-9653-464d-ace8-963f497ee7bb",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Components of Node on Canvas(MAIN-TC-2037, MAIN-TC-2038)",
              "fullTitle": "Attack Tree Components of Node on Canvas(MAIN-TC-2037, MAIN-TC-2038)",
              "timedOut": null,
              "duration": 13977,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick({\n              force: true\n            }).realMouseDown().realMouseMove(50, -200).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentLogo).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentNodeText).should('exist');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "a433c1d5-52bd-4343-a0cd-716fe169cd3c",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Canvas Component Menu Test (MAIN-TC-2042)",
              "fullTitle": "Attack Tree Canvas Component Menu Test (MAIN-TC-2042)",
              "timedOut": null,
              "duration": 14066,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- Canvas Component Menu Test (MAIN-TC-2042) (failed).png\"\n      }\n    ],\n    []\n  ]\n}",
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).eq(0).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuNodeTextOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDeleteTypeOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).should('exist');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "510844fd-77a7-4321-ac49-837072e1ba13",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Automatic NodeText Assignment Test(MAIN-TC-2041)",
              "fullTitle": "Attack Tree Automatic NodeText Assignment Test(MAIN-TC-2041)",
              "timedOut": null,
              "duration": 18269,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).eq(0).invoke('text').should('contain', 'Node');\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponentNodeText).eq(0).invoke('text').should('contain', 'Node1');\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).eq(1).invoke('text').should('contain', 'OR');\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponentNodeText).eq(1).invoke('text').should('contain', 'OR2');\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "4806bc10-15cb-43f8-ba10-461bed21ce3c",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dragging multiple nodes on Canvas(MAIN-TC-2039)",
              "fullTitle": "Attack Tree Dragging multiple nodes on Canvas(MAIN-TC-2039)",
              "timedOut": null,
              "duration": 13768,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick({\n              force: true\n            }).realMouseDown().realMouseMove(50, -200).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogNode).eq(0).realClick({\n                force: true\n              }).realMouseDown().realMouseMove(80, -500).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogLoadTreeEmptyMessage).should('exist').invoke('text').should('include', 'Only 1 root node is allowed');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "24fcd9ee-2f8c-46b7-917f-487da229cd67",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Node Drop-down and Changing Node (MAIN-TC-3213, MAIN-TC-3212, MAIN-TC-3220)",
              "fullTitle": "Attack Tree Node Drop-down and Changing Node (MAIN-TC-3213, MAIN-TC-3212, MAIN-TC-3220)",
              "timedOut": null,
              "duration": 18880,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).eq(0).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDropDown).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuNodeTextOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuAssignValueOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuControlOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuLinkChildTreeOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDeleteTypeOption).should('exist');\n              //Changing Node\n              cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).eq(0).invoke('text').should('contain', 'Node');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).eq(0).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeNodeOROption).eq(0).click().then(() => {\n                  cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).eq(0).invoke('text').should('contain', 'OR');\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "82a8ebf8-5797-41c5-be72-acc6d7e8ad26",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unlinking the 2nd Component (MAIN-TC-3214, MAIN-TC-3215)",
              "fullTitle": "Attack Tree Unlinking the 2nd Component (MAIN-TC-3214, MAIN-TC-3215)",
              "timedOut": null,
              "duration": 42765,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- Unlinking the 2nd Component (MAIN-TC-3214, MAIN-TC-3215) (failed).png\"\n      }\n    ],\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- Unlinking the 2nd Component (MAIN-TC-3214, MAIN-TC-3215) (failed) (attempt 2).png\"\n      }\n    ]\n  ]\n}",
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(1).realClick({\n              force: true\n            }).realMouseDown().realMouseMove(80, -500).get(attackTreeSelector.attackTreeDialogCanvas).realMouseUp().then(() => {\n              cy.get(attackTreeSelector.attackTreeCanvasDragChildComponentConfirmationDialog).should('exist').invoke('text').should('contain', 'The selected node and all of its children will be deleted.').then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopupDeleteButton).click().then(() => {\n                  cy.get(attackTreeSelector.attackTreeDialogCanvasElement).eq(1).should('not.exist');\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 20000ms: Expected <div.ng-star-inserted.block.blockElementAfterDrag.dragging> not to exist in the DOM, but it was continuously found. Queried from:\n\n              > cy.get(.blockElementAfterDrag)",
                "estack": "AssertionError: Timed out retrying after 20000ms: Expected <div.ng-star-inserted.block.blockElementAfterDrag.dragging> not to exist in the DOM, but it was continuously found. Queried from:\n\n              > cy.get(.blockElementAfterDrag)\n    at Context.eval (webpack://cypress/./cypress/e2e/attack-tree/attack-tree-canvas.cy.js:334:107)",
                "diff": null
              },
              "uuid": "95f08936-4e0c-449a-b6e9-d475b7780032",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Link Attack Path from tree drop down (MAIN-TC-3216)",
              "fullTitle": "Attack Tree Link Attack Path from tree drop down (MAIN-TC-3216)",
              "timedOut": null,
              "duration": 24617,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLinkAttackPath).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogLinkAttackPathPopup).should('exist');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "78b2de68-a7b9-4eec-a44b-abc2b5599c97",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Link Vulnerability from tree drop down (MAIN-TC-3217)",
              "fullTitle": "Attack Tree Link Vulnerability from tree drop down (MAIN-TC-3217)",
              "timedOut": null,
              "duration": 15121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLinkVulnerability).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogLinkVulnerabilityPathPopup).should('exist');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "ba568a66-013e-4706-8b7b-793b42149506",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "\"OR Component\" Drop-down & Changing Node(MAIN-TC-3221, MAIN-TC-3222)",
              "fullTitle": "Attack Tree \"OR Component\" Drop-down & Changing Node(MAIN-TC-3221, MAIN-TC-3222)",
              "timedOut": null,
              "duration": 45570,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- OR Component Drop-down & Changing Node(MAIN-TC-3221, MAIN-TC-3222) (failed).png\"\n      }\n    ],\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- OR Component Drop-down & Changing Node(MAIN-TC-3221, MAIN-TC-3222) (failed) (attempt 2).png\"\n      }\n    ]\n  ]\n}",
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).should('contain', 'OR'); //verifying the OR Gate \n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDropDown).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuNodeTextOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDeleteTypeOption).should('exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuControlOption).should('not.exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuLinkChildTreeOption).should('not.exist');\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuAssignValueOption).should('not.exist');\n              //Changing OR to Node\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).eq(1).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeNodeNodeOption).eq(1).click().then(() => {\n                  cy.get(attackTreeSelector.attackTreeDialogCanvasComponentName).invoke('text').should('include', 'Node'); //verifying the OR Gate \n                  cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).eq(1).click().then(() => {\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDropDown).should('exist');\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuNodeTextOption).should('exist');\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuChangeTypeOption).should('exist');\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuDeleteTypeOption).should('exist');\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuControlOption).should('exist');\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuLinkChildTreeOption).should('exist');\n                    cy.get(attackTreeSelector.attackTreeCanvasComponentMenuAssignValueOption).should('exist');\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {
                "message": "CypressError: Timed out retrying after 20050ms: `cy.click()` failed because this element:\n\n`<img class=\"moreButton\" src=\"../../assets/images/more.svg\">`\n\nis being covered by another element:\n\n`<div draggable=\"true\" class=\"ng-star-inserted block blockElementAfterDrag\" style=\"left: 41px; top: 670px;\">...</div>`\n\nFix this problem, or use {force: true} to disable error checking.\n\nhttps://on.cypress.io/element-cannot-be-interacted-with",
                "estack": "CypressError: Timed out retrying after 20050ms: `cy.click()` failed because this element:\n\n`<img class=\"moreButton\" src=\"../../assets/images/more.svg\">`\n\nis being covered by another element:\n\n`<div draggable=\"true\" class=\"ng-star-inserted block blockElementAfterDrag\" style=\"left: 41px; top: 670px;\">...</div>`\n\nFix this problem, or use {force: true} to disable error checking.\n\nhttps://on.cypress.io/element-cannot-be-interacted-with\n    at ensureIsDescendent (http://localhost:4200/__cypress/runner/cypress_runner.js:111947:68)\n    at ensureDescendents (http://localhost:4200/__cypress/runner/cypress_runner.js:111998:5)\n    at ensureDescendentsAndScroll (http://localhost:4200/__cypress/runner/cypress_runner.js:112004:14)\n    at ensureElIsNotCovered (http://localhost:4200/__cypress/runner/cypress_runner.js:112135:5)\n    at runAllChecks (http://localhost:4200/__cypress/runner/cypress_runner.js:112334:52)\n    at retryActionability (http://localhost:4200/__cypress/runner/cypress_runner.js:112371:16)\n    at tryCatcher (http://localhost:4200/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise.attempt.Promise.try (http://localhost:4200/__cypress/runner/cypress_runner.js:4315:29)\n    at whenStable (http://localhost:4200/__cypress/runner/cypress_runner.js:143918:68)\n    at <unknown> (http://localhost:4200/__cypress/runner/cypress_runner.js:143859:14)\n    at tryCatcher (http://localhost:4200/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (http://localhost:4200/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (http://localhost:4200/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (http://localhost:4200/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (http://localhost:4200/__cypress/runner/cypress_runner.js:1701:18)\n    at Promise._fulfill (http://localhost:4200/__cypress/runner/cypress_runner.js:1645:18)\n    at <unknown> (http://localhost:4200/__cypress/runner/cypress_runner.js:5450:46)\nFrom Your Spec Code:\n    at Context.eval (webpack://cypress/./cypress/e2e/attack-tree/attack-tree-canvas.cy.js:406:114)",
                "diff": null
              },
              "uuid": "9d0ab75f-41c2-4a49-b207-c4ac16f8331a",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Apply attack tree to threat\" button (MAIN-TC-3218)",
              "fullTitle": "Attack Tree Apply attack tree to threat\" button (MAIN-TC-3218)",
              "timedOut": null,
              "duration": 47350,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- Apply attack tree to threat button (MAIN-TC-3218) (failed).png\"\n      }\n    ],\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree-canvas.cy.js\\\\Attack Tree -- Apply attack tree to threat button (MAIN-TC-3218) (failed) (attempt 2).png\"\n      }\n    ]\n  ]\n}",
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogApplyAttackTreeToThreat).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogApplyAttackTreePopup).should('exist');\n              cy.get(attackTreeSelector.attackTreeDialogApplyAttackPopupHeading).invoke('text').should('contain', 'Linked Threats');\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {
                "message": "CypressError: Timed out retrying after 20050ms: `cy.click()` failed because this element is `disabled`:\n\n`<button mat-button=\"\" mattooltip=\"Apply Attack Tree to Threat\" class=\"mat-mdc-tooltip-trigger mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\" ng-reflect-message=\"Apply Attack Tree to Threat\" aria-describedby=\"cdk-describedby-message-sgd-1-2\" cdk-describedby-host=\"sgd-1\" ng-reflect-disabled=\"true\" disabled=\"true\">...</button>`\n\nFix this problem, or use `{force: true}` to disable error checking.\n\nhttps://on.cypress.io/element-cannot-be-interacted-with",
                "estack": "CypressError: Timed out retrying after 20050ms: `cy.click()` failed because this element is `disabled`:\n\n`<button mat-button=\"\" mattooltip=\"Apply Attack Tree to Threat\" class=\"mat-mdc-tooltip-trigger mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\" ng-reflect-message=\"Apply Attack Tree to Threat\" aria-describedby=\"cdk-describedby-message-sgd-1-2\" cdk-describedby-host=\"sgd-1\" ng-reflect-disabled=\"true\" disabled=\"true\">...</button>`\n\nFix this problem, or use `{force: true}` to disable error checking.\n\nhttps://on.cypress.io/element-cannot-be-interacted-with\n    at Object.isNotDisabled (http://localhost:4200/__cypress/runner/cypress_runner.js:145125:58)\n    at runAllChecks (http://localhost:4200/__cypress/runner/cypress_runner.js:112282:26)\n    at retryActionability (http://localhost:4200/__cypress/runner/cypress_runner.js:112371:16)\n    at tryCatcher (http://localhost:4200/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise.attempt.Promise.try (http://localhost:4200/__cypress/runner/cypress_runner.js:4315:29)\n    at whenStable (http://localhost:4200/__cypress/runner/cypress_runner.js:143918:68)\n    at <unknown> (http://localhost:4200/__cypress/runner/cypress_runner.js:143859:14)\n    at tryCatcher (http://localhost:4200/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (http://localhost:4200/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (http://localhost:4200/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (http://localhost:4200/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (http://localhost:4200/__cypress/runner/cypress_runner.js:1701:18)\n    at Promise._fulfill (http://localhost:4200/__cypress/runner/cypress_runner.js:1645:18)\n    at <unknown> (http://localhost:4200/__cypress/runner/cypress_runner.js:5450:46)\nFrom Your Spec Code:\n    at Context.eval (webpack://cypress/./cypress/e2e/attack-tree/attack-tree-canvas.cy.js:433:99)",
                "diff": null
              },
              "uuid": "3ac93d88-82ed-46b3-9e60-130afe10ba8e",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Control in 3 dot drop down of a node (MAIN-TC-3223)",
              "fullTitle": "Attack Tree Control in 3 dot drop down of a node (MAIN-TC-3223)",
              "timedOut": null,
              "duration": 31686,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click({\n    force: true\n  }).then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogCanvasComponent3Dots).eq(0).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeCanvasComponentMenuControlOption).eq(0).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeCanvasControlPopup).should('exist');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "706dd4d2-9262-4f57-961f-865c6c38f831",
              "parentUUID": "9ea87ec4-7da8-4f40-9cf6-4b012e608118",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f251d558-af1a-4b41-aab9-40a7774a6624",
            "499c5908-bcb2-4ce7-9924-fbd29f64e5af",
            "d1f9ac5e-9653-464d-ace8-963f497ee7bb",
            "a433c1d5-52bd-4343-a0cd-716fe169cd3c",
            "510844fd-77a7-4321-ac49-837072e1ba13",
            "4806bc10-15cb-43f8-ba10-461bed21ce3c",
            "24fcd9ee-2f8c-46b7-917f-487da229cd67",
            "82a8ebf8-5797-41c5-be72-acc6d7e8ad26",
            "78b2de68-a7b9-4eec-a44b-abc2b5599c97",
            "ba568a66-013e-4706-8b7b-793b42149506",
            "706dd4d2-9262-4f57-961f-865c6c38f831"
          ],
          "failures": [
            "7d13bccd-f364-45d5-b287-ff0aeedae4b6",
            "817f7de3-af3c-4593-bee5-d185f11f5782",
            "95f08936-4e0c-449a-b6e9-d475b7780032",
            "9d0ab75f-41c2-4a49-b207-c4ac16f8331a",
            "3ac93d88-82ed-46b3-9e60-130afe10ba8e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 519961,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dafe237b-1783-4865-a77c-621733a08011",
          "title": "CLEANUP: Project Deletion",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deleting The Project If Created",
              "fullTitle": "CLEANUP: Project Deletion Deleting The Project If Created",
              "timedOut": null,
              "duration": 34485,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.viewport(1920, 1080);\ncy.login().then(() => {\n  cy.deleteProject(projectName);\n});",
              "err": {},
              "uuid": "39d1eb9a-73aa-477e-9b2e-8811c81302de",
              "parentUUID": "dafe237b-1783-4865-a77c-621733a08011",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39d1eb9a-73aa-477e-9b2e-8811c81302de"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34485,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress\\reports\\.jsons",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": true,
        "reportTitle": "Vultara Automation Test",
        "showPassed": true,
        "showFailed": true,
        "showPending": true,
        "showSkipped": false,
        "browser": "all",
        "quiet": true
      },
      "version": "5.2.0"
    }
  }
}