{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 10,
    "pending": 0,
    "failures": 1,
    "start": "2024-02-15T18:39:37.737Z",
    "end": "2024-02-15T18:42:47.115Z",
    "duration": 189378,
    "testsRegistered": 11,
    "passPercent": 90.9090909090909,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b464d116-4cdc-43be-a25f-a02ab787d52b",
      "title": "",
      "fullFile": "cypress\\e2e\\Threat-Generation\\attack-tree.cy.js",
      "file": "cypress\\e2e\\Threat-Generation\\attack-tree.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ee53b430-3e83-443e-a88d-867d9831c1de",
          "title": "Attack Tree",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Attack Tree Button in Threat List View page (MAIN-TC-1988, MAIN-TC-1990, MAIN-TC-1992)",
              "fullTitle": "Attack Tree Attack Tree Button in Threat List View page (MAIN-TC-1988, MAIN-TC-1990, MAIN-TC-1992)",
              "timedOut": null,
              "duration": 26804,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).should('exist');\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialog).should('exist');\n    cy.get(threatListViewSelector.threatListViewAttackPathTextArea).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialog).should('not.be.visible');\n    });\n  });\n});",
              "err": {},
              "uuid": "f697a0a1-1c48-4853-b88f-be10391fb414",
              "parentUUID": "ee53b430-3e83-443e-a88d-867d9831c1de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tree in Attack Path Popup (MAIN-TC-1993, MAIN-TC-1994, MAIN-TC-1995, MAIN-TC-1996)",
              "fullTitle": "Attack Tree Tree in Attack Path Popup (MAIN-TC-1993, MAIN-TC-1994, MAIN-TC-1995, MAIN-TC-1996)",
              "timedOut": null,
              "duration": 15929,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).type('Automation Tree').then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click();\n        });\n      });\n    });\n  });\n  let initialLocation;\n  cy.get(threatListViewSelector.threatListViewAttackPathTextArea).click().then(() => {\n    cy.get(attackPathPopupSelector.attackPathDialogAttackTreeIcon).then($el => {\n      initialLocation = $el.offset();\n    });\n    cy.get(attackPathPopupSelector.attackPathDialogLinkTreeButton).click().then(() => {\n      cy.get(attackPathPopupSelector.attackPathDialogAttackTreeIcon).then($el => {\n        const newLocation = $el.offset();\n        expect(newLocation).not.to.deep.equal(initialLocation);\n      });\n      cy.get(attackPathPopupSelector.attackPathDialogAttackTreeIcon).should('exist').click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialog).should('exist');\n      });\n    });\n  });\n  cy.get(attackPathPopupSelector.attackPathDialogAttackTreeIcon).click().then(() => {\n    // Pressing the tree button again to close\n    cy.get(attackTreeSelector.attackTreeDialog).should('not.be.visible');\n  });\n});",
              "err": {},
              "uuid": "ddf85f18-0156-420b-85cf-98fa13aa98b8",
              "parentUUID": "ee53b430-3e83-443e-a88d-867d9831c1de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attack Tree in Local Storage (MAIN-TC-1997, MAIN-TC-1998))",
              "fullTitle": "Attack Tree Attack Tree in Local Storage (MAIN-TC-1997, MAIN-TC-1998))",
              "timedOut": null,
              "duration": 14604,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.window().then(win => {\n    const diagramId = win.localStorage.getItem('diagramId');\n    expect(diagramId).to.not.exist;\n  });\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.wait(3000);\n            cy.window().then(win => {\n              const diagramId = win.localStorage.getItem('diagramId');\n              expect(diagramId).to.exist;\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "fbdf9d5e-2c5e-4fd0-b0d8-aa5a457d6a80",
              "parentUUID": "ee53b430-3e83-443e-a88d-867d9831c1de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the  Header, Canvas, Footer in Attack tree panel(MAIN-TC-2001)",
              "fullTitle": "Attack Tree Verify the  Header, Canvas, Footer in Attack tree panel(MAIN-TC-2001)",
              "timedOut": null,
              "duration": 17633,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogHeader).should('exist').should('be.visible');\n            cy.get(attackTreeSelector.attackTreeDialogCanvas).should('exist').should('be.visible');\n            cy.get(attackTreeSelector.attackTreeDialogFooter).should('exist').should('be.visible');\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "b4f631a9-01f9-44cb-95e9-7ce3601aa6a5",
              "parentUUID": "ee53b430-3e83-443e-a88d-867d9831c1de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the Header Components (MAIN-TC-2002)",
              "fullTitle": "Attack Tree Verify the Header Components (MAIN-TC-2002)",
              "timedOut": null,
              "duration": 16154,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click({\n      force: true\n    }).then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(0).should('exist').invoke('text').should('contain', 'Tree');\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).should('exist').click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogDropDown).should('exist');\n            });\n            cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).should('exist').invoke('text').should('include', 'Loaded: Automation Tree');\n            cy.get(attackTreeSelector.attackTreeDialogSaveIcon).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogPlayIcon).should('exist');\n            cy.get(attackTreeSelector.attackTreeDialogFooter).should('exist');\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "75bdbfdc-53ef-4f58-8514-83ce90b22748",
              "parentUUID": "ee53b430-3e83-443e-a88d-867d9831c1de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the Components when No project is Loaded (MAIN-TC-2003)",
              "fullTitle": "Attack Tree Verify the Components when No project is Loaded (MAIN-TC-2003)",
              "timedOut": null,
              "duration": 7429,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogHeader).should('exist').should('be.visible');\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).should('be.enabled');\n    cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).should('exist').invoke('text').should('include', 'Loaded: None');\n    cy.get(attackTreeSelector.attackTreeDialogSaveIcon).should('not.be.enabled');\n    cy.get(attackTreeSelector.attackTreeDialogFooter).should('not.exist');\n  });\n});",
              "err": {},
              "uuid": "2ccda9a5-cf77-4e94-a00f-7a2eb9cf76f5",
              "parentUUID": "ee53b430-3e83-443e-a88d-867d9831c1de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attack tree panel \"Tree Button Dropdown\" option (MAIN-TC-2004)",
              "fullTitle": "Attack Tree Attack tree panel \"Tree Button Dropdown\" option (MAIN-TC-2004)",
              "timedOut": null,
              "duration": 10091,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogDropDown).should('exist');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).invoke('text').should('contain', 'New Tree');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownChange).should('not.be.enabled').invoke('text').should('contain', 'Change Tree Name');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownDeleteTree).invoke('text').should('contain', 'Delete Tree');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).invoke('text').should('contain', 'Load Tree');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).should('not.be.enabled').invoke('text').should('contain', 'Save Tree As');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLinkAttackPath).invoke('text').should('contain', 'Link Attack Path');\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLinkVulnerability).invoke('text').should('contain', 'Link Vulnerability');\n    });\n  });\n});\ncy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n  cy.get(attackTreeSelector.attackTreeDialogSelectTree).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogTreeDropDownChange).should('be.enabled').invoke('text').should('contain', 'Change Tree Name');\n        cy.get(attackTreeSelector.attackTreeDialogTreeDropDownDeleteTree).invoke('text').should('contain', 'Delete Tree');\n        cy.get(attackTreeSelector.attackTreeDialogTreeDropDownSaveTree).should('be.enabled').invoke('text').should('contain', 'Save Tree As');\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "8384c55e-ec81-4218-8a0d-36be9c93d8b7",
              "parentUUID": "ee53b430-3e83-443e-a88d-867d9831c1de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "\"New Tree\" Dialog (MAIN-TC-2005, MAIN-TC-2006, MAIN-TC-2007)",
              "fullTitle": "Attack Tree \"New Tree\" Dialog (MAIN-TC-2005, MAIN-TC-2006, MAIN-TC-2007)",
              "timedOut": null,
              "duration": 10213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownNewTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopup).should('exist');\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).should('not.be.enabled');\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupName).type('Automation Tree 2');\n        cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).should('be.enabled').click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogLoadedTreeButton).invoke('text').should('include', 'Automation Tree 2');\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "8a1d4a45-31f1-416e-8686-852660aeb565",
              "parentUUID": "ee53b430-3e83-443e-a88d-867d9831c1de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "\"Change Tree Name\" Dialog (MAIN-TC-2008)",
              "fullTitle": "Attack Tree \"Change Tree Name\" Dialog (MAIN-TC-2008)",
              "timedOut": null,
              "duration": 9451,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        cy.get(attackTreeSelector.attackTreeDialogSelectTree).click().then(() => {\n          cy.get(attackTreeSelector.attackTreeDialogNewTreePopupConfirmButton).click().then(() => {\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownChange).click().then(() => {\n                cy.get(attackTreeSelector.attackTreeDialogChangeTreeNamePopup).should('exist');\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "263ab89c-c089-41c6-96a2-482720dc62ab",
              "parentUUID": "ee53b430-3e83-443e-a88d-867d9831c1de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "\"Load & Delete Tree\" Dialog (MAIN-TC-2009, MAIN-TC-2010, MAIN-TC-2012)",
              "fullTitle": "Attack Tree \"Load & Delete Tree\" Dialog (MAIN-TC-2009, MAIN-TC-2010, MAIN-TC-2012)",
              "timedOut": null,
              "duration": 35868,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      {\n        \"title\": \"Failed screenshot\",\n        \"value\": \"\\\\attack-tree.cy.js\\\\Attack Tree -- Load & Delete Tree Dialog (MAIN-TC-2009, MAIN-TC-2010, MAIN-TC-2012) (failed).png\"\n      }\n    ]\n  ]\n}",
              "code": "cy.visit(Cypress.env('baseURL') + '/threats').then(() => {\n  cy.get(threatListViewSelector.attackTreeButton).click().then(() => {\n    //Attack Tree open\n    cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n      //Tree drop down click\n      cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click().then(() => {\n        //Load Tree click\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreePopup).should('exist'); //Load tree popup\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).should('exist'); //select project\n        cy.get(attackTreeSelector.attackTreeDialogLoadTreePopupCancelButton).click(); //Cancel the pop up\n      });\n    });\n  });\n  cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n    //Again tree drop down\n    cy.get(attackTreeSelector.attackTreeDialogTreeDropDownDeleteTree).click().then(() => {\n      //Click delete tree\n      cy.get(attackTreeSelector.attackTreeDialogSelectTree).click().then(() => {\n        //select tree\n        cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopupDeleteButton).click().then(() => {\n          //press delete btn\n          cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopupDeleteButton).click(); //delete button(1st )\n        }); //1st tree deleted\n      });\n    });\n  });\n  cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n    //click tree\n    cy.get(attackTreeSelector.attackTreeDialogTreeDropDownDeleteTree).click().then(() => {\n      //select delete\n      cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopup).should('exist'); //delete popup\n      cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopupDeleteButton).should('not.be.enabled'); //delete btn not enable\n      cy.get(attackTreeSelector.attackTreeDialogLoadTreeSelectTree).should('exist').click().then(() => {\n        //select tree\n        cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopupDeleteButton).should('be.enabled').click().then(() => {\n          //click delete\n          cy.get(attackTreeSelector.attackTreeDialogDeleteTreePopupDeleteButton).click().then(() => {\n            //again click delet(2nd deleted)\n            cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n              //again click tree\n              cy.get(attackTreeSelector.attackTreeDialogTreeDropDownDeleteTree).click();\n              cy.get(navBarSelector.subsequentSnackBarElement).should('exist').invoke('text').should('include', 'No Trees found. Please, create new Tree').then(() => {\n                //working fine\n                cy.get(attackTreeSelector.attackTreeDialogTreeButton).eq(1).click().then(() => {\n                  cy.get(attackTreeSelector.attackTreeDialogTreeDropDownLoadTree).click();\n                  cy.get(navBarSelector.subsequentSnackBarElement).should('exist').invoke('text').should('include', 'No Trees found. Please, create new Tree');\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 20000ms: expected ' Attack Tree deleted successfully.\\n' to include 'No Trees found. Please, create new Tree'",
                "estack": "AssertionError: Timed out retrying after 20000ms: expected ' Attack Tree deleted successfully.\\n' to include 'No Trees found. Please, create new Tree'\n    at Context.eval (webpack://cypress/./cypress/e2e/Threat-Generation/attack-tree.cy.js:272:116)",
                "diff": null
              },
              "uuid": "5ba4ecd3-e52d-4648-87e0-200a4b0cb46b",
              "parentUUID": "ee53b430-3e83-443e-a88d-867d9831c1de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete the Project",
              "fullTitle": "Attack Tree Delete the Project",
              "timedOut": null,
              "duration": 19034,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.deleteProject(projectName);",
              "err": {},
              "uuid": "21eab2d5-619b-404f-9dfb-420c07395a25",
              "parentUUID": "ee53b430-3e83-443e-a88d-867d9831c1de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f697a0a1-1c48-4853-b88f-be10391fb414",
            "ddf85f18-0156-420b-85cf-98fa13aa98b8",
            "fbdf9d5e-2c5e-4fd0-b0d8-aa5a457d6a80",
            "b4f631a9-01f9-44cb-95e9-7ce3601aa6a5",
            "75bdbfdc-53ef-4f58-8514-83ce90b22748",
            "2ccda9a5-cf77-4e94-a00f-7a2eb9cf76f5",
            "8384c55e-ec81-4218-8a0d-36be9c93d8b7",
            "8a1d4a45-31f1-416e-8686-852660aeb565",
            "263ab89c-c089-41c6-96a2-482720dc62ab",
            "21eab2d5-619b-404f-9dfb-420c07395a25"
          ],
          "failures": [
            "5ba4ecd3-e52d-4648-87e0-200a4b0cb46b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 183210,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress\\reports\\.jsons",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": true,
        "reportTitle": "Vultara Automation Test",
        "showPassed": true,
        "showFailed": true,
        "showPending": true,
        "showSkipped": false,
        "browser": "all",
        "quiet": true
      },
      "version": "5.2.0"
    }
  }
}